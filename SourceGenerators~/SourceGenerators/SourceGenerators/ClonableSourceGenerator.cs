using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SourceGenerators;

[Generator]
public class ClonableSourceGenerator : IIncrementalGenerator
{
    private const string CLONABLE_ATTRIBUTE_NAME = "ClonableAttribute";
    
    struct Metadata
    {
        public string namespaceName;
        public string name;
        public List<UsingDirectiveSyntax> usingDirectives;
        public List<FieldDeclarationSyntax> fields;
    }
    
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => s is ClassDeclarationSyntax or StructDeclarationSyntax,
                transform: static (ctx, _) => Transform(ctx))
            .Where(m => m.fields.Count > 0);
        context.RegisterSourceOutput(provider, GenerateCode);
    }

    private static Metadata Transform(GeneratorSyntaxContext context)
    {
        Metadata metadata = default;
        var syntax = (TypeDeclarationSyntax)context.Node;
        metadata.fields = new List<FieldDeclarationSyntax>();
        metadata.name = syntax.Identifier.ToString();
        metadata.namespaceName = syntax.GetNamespaceName();
        metadata.usingDirectives = [..syntax.GetUsingDirectives().ToArray()];
        
        if (!syntax.HasModifier("public") || !syntax.HasAttribute(CLONABLE_ATTRIBUTE_NAME, context))
        {
            return metadata;
        }
        foreach (var node in syntax.ChildNodes())
        {
            if (node is not FieldDeclarationSyntax field)
            {
                continue;
            }
            metadata.fields.Add(field);
        }
        return metadata;
    }

    private static void GenerateCode(SourceProductionContext context, Metadata metadata)
    {
        using MemoryStream sourceStream = new();
        using StreamWriter sourceStreamWriter = new(sourceStream, Encoding.UTF8);
        using IndentedTextWriter codeWriter = new(sourceStreamWriter);
        
        codeWriter.WriteLine("//<auto-generated/>");

        foreach (var usingDirective in metadata.usingDirectives)
        {
            codeWriter.WriteLine(usingDirective.ToString());
        }
        codeWriter.WriteLine("using System.Runtime.CompilerServices;\n");
        
        var namespaceName = metadata.namespaceName;
        namespaceName = string.IsNullOrEmpty(namespaceName) ? "Generated" : $"{namespaceName}.Generated";
        codeWriter.StartNamespaceScope(namespaceName);

        using (codeWriter.Scope(prefix: $"public static partial class {metadata.name}Extensions"))
        {
            codeWriter.WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            using (codeWriter.Scope(prefix: $"public static {metadata.name} Clone(this {metadata.name} self)"))
            {
                using (codeWriter.Scope(prefix: $"return new {metadata.name}", inlinePostix: ";"))
                {
                    for (int i = 0, length = metadata.fields.Count; i < length; i++)
                    {
                        var field = metadata.fields[i];
                        var variableName = field.Declaration.Variables[0].Identifier.Text;
                        codeWriter.WriteLine($"{variableName} = self.{variableName},");
                    }
                }
            }
        }
        
        codeWriter.EndNamespaceScope(namespaceName);
        codeWriter.Flush();
        context.AddSource($"{metadata.name}Extensions.g.cs", SourceText.From(sourceStream, Encoding.UTF8, canBeEmbedded: true));
    }
}